"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9271],{4834:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/attribute-modal-76bcf7dcaf434ed62279bf73ca3bd289.png"},8008:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"configuration/features/attributes-formulas","title":"Dynamic Attributes and Formulas","description":"The Page Builder provides a powerful system for creating dynamic, data-driven components through flexible attribute configuration. Attributes enable components to perform real-time calculations, display static values, accept user input, and render images\u2014all orchestrated through event-driven formula execution and callback functions.","source":"@site/docs/configuration/features/attributes-formulas.md","sourceDirName":"configuration/features","slug":"/configuration/features/attributes-formulas","permalink":"/page-builder/docs/configuration/features/attributes-formulas","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Dynamic Attributes and Formulas","sidebar_label":"Dynamic Attributes"},"sidebar":"docs","previous":{"title":"View Mode (Read-Only)","permalink":"/page-builder/docs/configuration/features/view-mode"},"next":{"title":"Custom Component","permalink":"/page-builder/docs/configuration/features/custom-components"}}');var r=t(4848),l=t(8453);const s={title:"Dynamic Attributes and Formulas",sidebar_label:"Dynamic Attributes"},a="Dynamic Attributes and Formulas",u={},c=[{value:"Attribute System Overview",id:"attribute-system-overview",level:2},{value:"Component Attribute Structure",id:"component-attribute-structure",level:3},{value:"Component Configuration with Attributes",id:"component-configuration-with-attributes",level:3},{value:"Attribute Types",id:"attribute-types",level:2},{value:"1. <strong>Constant Type</strong>",id:"1-constant-type",level:3},{value:"2. <strong>Input Type</strong>",id:"2-input-type",level:3},{value:"3. <strong>Formula Type</strong>",id:"3-formula-type",level:3},{value:"4. <strong>Image Type</strong>",id:"4-image-type",level:3},{value:"Data Seeding (Binding Attributes to Components)",id:"data-seeding-binding-attributes-to-components",level:2},{value:"Seeding Workflow",id:"seeding-workflow",level:3},{value:"Practical Example: Calculator Table",id:"practical-example-calculator-table",level:3},{value:"Event-Driven Calculation System",id:"event-driven-calculation-system",level:2},{value:"Trigger Events",id:"trigger-events",level:3},{value:"Global Execution Function",id:"global-execution-function",level:3},{value:"Implementation Example",id:"implementation-example",level:3},{value:"App.tsx",id:"apptsx",level:4},{value:"utils/executeFormula.ts",id:"utilsexecuteformulats",level:4},{value:"Calculation Flow",id:"calculation-flow",level:3},{value:"Attribute Execution Order",id:"attribute-execution-order",level:2},{value:"Editability Rules",id:"editability-rules",level:2},{value:"For Input Attributes",id:"for-input-attributes",level:3},{value:"For Constant Attributes",id:"for-constant-attributes",level:3},{value:"For Formula and Image Attributes",id:"for-formula-and-image-attributes",level:3},{value:"Complete Integration Example",id:"complete-integration-example",level:2},{value:"App.tsx",id:"apptsx-1",level:4},{value:"utils/executeFormula.ts",id:"utilsexecuteformulats-1",level:4},{value:"Best Practices",id:"best-practices",level:2},{value:"Organizing Attributes",id:"organizing-attributes",level:3},{value:"Working with User Input",id:"working-with-user-input",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Summary",id:"summary",level:2}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dynamic-attributes-and-formulas",children:"Dynamic Attributes and Formulas"})}),"\n",(0,r.jsxs)(n.p,{children:["The Page Builder provides a powerful system for creating ",(0,r.jsx)(n.strong,{children:"dynamic, data-driven components"})," through flexible attribute configuration. Attributes enable components to perform ",(0,r.jsx)(n.strong,{children:"real-time calculations, display static values, accept user input, and render images"}),"\u2014all orchestrated through event-driven formula execution and callback functions."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Dynamic Attributes in Table Component",src:t(9834).A+"",width:"1850",height:"1053"}),"\n",(0,r.jsx)(n.em,{children:"Table component with dynamic attributes showing input fields in the Attribute Tab with trigger events"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"attribute-system-overview",children:"Attribute System Overview"}),"\n",(0,r.jsx)(n.p,{children:"Attributes define how components behave and interact with data. Each component can have multiple attributes that are configured independently and executed in a specified order."}),"\n",(0,r.jsx)(n.h3,{id:"component-attribute-structure",children:"Component Attribute Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export interface ComponentAttribute {\n  id: string; // Unique identifier for the attribute\n  type: 'Constant' | 'Formula' | 'Input' | 'Image'; // Attribute type\n  input_type?: 'text' | 'number' | 'checkbox'; // Input field type (optional for Formula/Image)\n  title: string; // Display label for the attribute\n  value: string | number | boolean; // Current or initial value\n  key: string; // Reference key for calculations\n  execute_order: number; // Order of execution in calculations\n  editable?: boolean; // Whether the attribute value can be edited\n  default_value?: string | number | boolean | null; // Value displayed on refresh or initial load\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Note on ",(0,r.jsx)(n.code,{children:"default_value"}),":"]})," When a ",(0,r.jsx)(n.code,{children:"default_value"})," is provided, it will be displayed instead of the calculated ",(0,r.jsx)(n.code,{children:"value"})," when the component is first loaded or refreshed. This is particularly useful for Input, Constant, and seeded Formula attributes to display a baseline or placeholder value before calculations occur."]}),"\n",(0,r.jsx)(n.h3,{id:"component-configuration-with-attributes",children:"Component Configuration with Attributes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export interface BasicComponent {\n  name: string;\n  attributes?: ComponentAttribute[];\n  globalExecuteFunction?: Function;\n}\n\nexport interface DynamicComponents {\n  Basic: BasicComponent[];\n  Extra: string[];\n  Custom?: Record<string, CustomComponentConfig>;\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"attribute-types",children:"Attribute Types"}),"\n",(0,r.jsx)(n.p,{children:"The Page Builder supports four attribute types, each serving a specific purpose in your component's data flow:"}),"\n",(0,r.jsxs)(n.h3,{id:"1-constant-type",children:["1. ",(0,r.jsx)(n.strong,{children:"Constant Type"})]}),"\n",(0,r.jsxs)(n.p,{children:["Constant attributes represent ",(0,r.jsx)(n.strong,{children:"static, predefined values"})," that remain unchanged during normal operation."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Characteristics:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Displays a fixed value in the component or table cell"}),"\n",(0,r.jsx)(n.li,{children:"Can be edited in the UI for temporary display changes"}),"\n",(0,r.jsxs)(n.li,{children:["During formula calculations, the ",(0,r.jsx)(n.strong,{children:"original constant value is used"}),", not the edited value"]}),"\n",(0,r.jsx)(n.li,{children:"Useful for reference values, tax rates, or fixed multipliers"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"{\n  id: 'tax-rate-id',\n  type: 'Constant',\n  input_type: 'number',\n  title: 'Tax Rate',\n  value: 18,\n  key: 'tax_rate',\n  execute_order: 1\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"In the Attribute Tab, you can edit the displayed value in the UI"}),"\n",(0,r.jsx)(n.li,{children:"When formulas are calculated, the original value (18) is used"}),"\n",(0,r.jsx)(n.li,{children:"The edited value is only reflected in the visual display"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-input-type",children:["2. ",(0,r.jsx)(n.strong,{children:"Input Type"})]}),"\n",(0,r.jsxs)(n.p,{children:["Input attributes allow ",(0,r.jsx)(n.strong,{children:"users to enter values dynamically"})," that affect component behavior and calculations."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Characteristics:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Displays an editable input field based on the ",(0,r.jsx)(n.code,{children:"input_type"})," (text, number, checkbox)"]}),"\n",(0,r.jsxs)(n.li,{children:["Can be marked as ",(0,r.jsx)(n.code,{children:"editable: true"})," (default) or ",(0,r.jsx)(n.code,{children:"editable: false"})]}),"\n",(0,r.jsxs)(n.li,{children:["When ",(0,r.jsx)(n.code,{children:"editable: false"}),", the input field is read-only in the Attribute Tab"]}),"\n",(0,r.jsx)(n.li,{children:"Appears in the Attribute Tab when the component is selected"}),"\n",(0,r.jsx)(n.li,{children:"Triggers calculation events (onChange, onBlur, etc.)"}),"\n",(0,r.jsxs)(n.li,{children:["User-entered values are passed to the ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const dynamicAttributes: ComponentAttribute[] = [\n  {\n    id: 'input-a',\n    type: 'Input',\n    input_type: 'number',\n    title: 'Input A',\n    value: 10,\n    key: 'input-a-key',\n    execute_order: 1,\n    editable: true,\n    default_value: 10,\n  },\n  {\n    id: 'input-b',\n    type: 'Input',\n    input_type: 'number',\n    title: 'Input B',\n    value: 5,\n    key: 'input-b-key',\n    execute_order: 2,\n    editable: true,\n    default_value: 5,\n  },\n];\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Display and Interaction:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Attribute Tab with Input Fields",src:t(9834).A+"",width:"1850",height:"1053"}),"\n",(0,r.jsx)(n.em,{children:"Attribute Tab showing various input types with their trigger events"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"title"})," property displays as the label in the Attribute Tab"]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"value"})," property shows as the default value in the input field"]}),"\n",(0,r.jsxs)(n.li,{children:["When ",(0,r.jsx)(n.code,{children:"editable: true"}),", users can modify the value"]}),"\n",(0,r.jsxs)(n.li,{children:["When ",(0,r.jsx)(n.code,{children:"editable: false"}),", the field is read-only but still visible"]}),"\n",(0,r.jsx)(n.li,{children:"Each input attribute has an associated trigger event selector"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-formula-type",children:["3. ",(0,r.jsx)(n.strong,{children:"Formula Type"})]}),"\n",(0,r.jsxs)(n.p,{children:["Formula attributes perform ",(0,r.jsx)(n.strong,{children:"calculations based on other attributes"})," using formula strings that reference attribute keys."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Characteristics:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Executes mathematical or logical expressions"}),"\n",(0,r.jsxs)(n.li,{children:["References other attributes by their ",(0,r.jsx)(n.code,{children:"key"})," property"]}),"\n",(0,r.jsxs)(n.li,{children:["Executed in order specified by ",(0,r.jsx)(n.code,{children:"execute_order"})]}),"\n",(0,r.jsx)(n.li,{children:"Result is calculated when the trigger event is fired"}),"\n",(0,r.jsx)(n.li,{children:"Cannot be directly edited by users; value is always calculated"}),"\n",(0,r.jsxs)(n.li,{children:["The formula string is executed by the ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const dynamicAttributes: ComponentAttribute[] = [\n  // Input attributes\n  {\n    id: 'input-a',\n    type: 'Input',\n    input_type: 'number',\n    title: 'Input A',\n    value: 10,\n    key: 'input-a-key',\n    execute_order: 1,\n    editable: true,\n    default_value: 10,\n  },\n  {\n    id: 'input-b',\n    type: 'Input',\n    input_type: 'number',\n    title: 'Input B',\n    value: 5,\n    key: 'input-b-key',\n    execute_order: 2,\n    editable: true,\n    default_value: 5,\n  },\n  // Formula attributes\n  {\n    id: 'formula-sum',\n    type: 'Formula',\n    title: 'Total Sum',\n    value: '{Input A} + {Input B}', // Formula string for display\n    key: 'formula-sum-key',\n    execute_order: 3,\n  },\n  {\n    id: 'formula-product',\n    type: 'Formula',\n    title: 'Total Product',\n    value: '{Input A} * {Input B}',\n    key: 'formula-product-key',\n    execute_order: 4,\n  },\n];\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Formula Resolution:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Formulas reference attributes by their ",(0,r.jsx)(n.code,{children:"key"})," (e.g., ",(0,r.jsx)(n.code,{children:"input-a-key"}),", ",(0,r.jsx)(n.code,{children:"input-b-key"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["The formula string is passed to ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"})," for execution"]}),"\n",(0,r.jsxs)(n.li,{children:["Results are calculated in ",(0,r.jsx)(n.code,{children:"execute_order"})," sequence"]}),"\n",(0,r.jsxs)(n.li,{children:["Dependent formulas (those referencing other formulas) must have higher ",(0,r.jsx)(n.code,{children:"execute_order"})," values"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-image-type",children:["4. ",(0,r.jsx)(n.strong,{children:"Image Type"})]}),"\n",(0,r.jsxs)(n.p,{children:["Image attributes enable components to ",(0,r.jsx)(n.strong,{children:"display images dynamically"})," from various sources."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Characteristics:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Displays image content in the component"}),"\n",(0,r.jsx)(n.li,{children:"Value contains the image URL or source path"}),"\n",(0,r.jsx)(n.li,{children:"Non-editable in the Attribute Tab"}),"\n",(0,r.jsx)(n.li,{children:"Useful for logos, headers, or dynamic visual content"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"{\n  id: 'company-logo-id',\n  type: 'Image',\n  input_type: 'text',\n  title: 'Company Logo',\n  value: 'https://example.com/logo.png',\n  key: 'company_logo',\n  execute_order: 1,\n  editable: false\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"data-seeding-binding-attributes-to-components",children:"Data Seeding (Binding Attributes to Components)"}),"\n",(0,r.jsxs)(n.p,{children:["Data seeding allows you to ",(0,r.jsx)(n.strong,{children:"link attribute values directly to component cells or content"}),". This creates a live connection where changes to attributes are reflected in the rendered output."]}),"\n",(0,r.jsx)(n.h3,{id:"seeding-workflow",children:"Seeding Workflow"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Component Settings Modal for Attribute Binding",src:t(4834).A+"",width:"1592",height:"894"}),"\n",(0,r.jsx)(n.em,{children:"Modal showing available attributes that can be seeded to a table cell"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Steps:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Click on a Table Cell"})," to select it"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'Click "Set table-cell-content Attribute" Button'})," in the Attribute Tab"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Component Settings Modal Opens"})," displaying all available attributes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Select an Attribute"})," from the list to bind it to the cell"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Save"})," the selection"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Once seeded, the selected attribute's value will display in that cell and update whenever the attribute value changes."}),"\n",(0,r.jsx)(n.h3,{id:"practical-example-calculator-table",children:"Practical Example: Calculator Table"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const dynamicAttributes: ComponentAttribute[] = [\n  {\n    id: 'input-a',\n    type: 'Input',\n    input_type: 'number',\n    title: 'Input A',\n    value: 10,\n    key: 'input-a-key',\n    execute_order: 1,\n    editable: true,\n    default_value: 10,\n  },\n  {\n    id: 'input-b',\n    type: 'Input',\n    input_type: 'number',\n    title: 'Input B',\n    value: 5,\n    key: 'input-b-key',\n    execute_order: 2,\n    editable: true,\n    default_value: 5,\n  },\n  {\n    id: 'formula-sum',\n    type: 'Formula',\n    title: 'Total Sum',\n    value: '{Input A} + {Input B}',\n    key: 'formula-sum-key',\n    execute_order: 3,\n  },\n  {\n    id: 'formula-product',\n    type: 'Formula',\n    title: 'Total Product',\n    value: '{Input A} * {Input B}',\n    key: 'formula-product-key',\n    execute_order: 4,\n  },\n];\n\n// In a table, you might seed these attributes to different cells:\n// Cell \"First Number\" \u2192 input-a-key\n// Cell \"Second Number\" \u2192 input-b-key\n// Cell \"Sum Result\" \u2192 formula-sum-key\n// Cell \"Product Result\" \u2192 formula-product-key\n"})}),"\n",(0,r.jsx)(n.p,{children:'When a user changes "Input A" or "Input B", the Sum and Product formulas recalculate and update in the table.'}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"event-driven-calculation-system",children:"Event-Driven Calculation System"}),"\n",(0,r.jsxs)(n.p,{children:["The Page Builder uses an ",(0,r.jsx)(n.strong,{children:"event-driven architecture"})," to trigger attribute calculations. When a user interacts with an Input attribute, the specified trigger event fires, invoking the ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"})," to compute all dependent formulas."]}),"\n",(0,r.jsx)(n.h3,{id:"trigger-events",children:"Trigger Events"}),"\n",(0,r.jsx)(n.p,{children:"For each Input attribute, you can select which event should trigger calculations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"On Input (Real-time)"}),": Fires continuously as the user types (default)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"On Change"}),": Fires when the input loses focus or value changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"On Blur"}),": Fires when the input field loses focus"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"On Key Down"}),": Fires on every key press (advanced use cases)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"Trigger Event Selection",src:t(9834).A+"",width:"1850",height:"1053"}),"\n",(0,r.jsx)(n.em,{children:"Trigger event dropdown showing available event options for input attributes"})]}),"\n",(0,r.jsx)(n.h3,{id:"global-execution-function",children:"Global Execution Function"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"})," is a ",(0,r.jsx)(n.strong,{children:"callback function provided by the developer"})," that handles all formula calculations for a component."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Function Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type GlobalExecuteFunction = (\n  inputValues: Record<string, any>\n) => Record<string, any>;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Input Parameter:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Receives an object containing all attribute values"}),"\n",(0,r.jsxs)(n.li,{children:["Keys are the ",(0,r.jsx)(n.code,{children:"key"})," properties of attributes (not titles)"]}),"\n",(0,r.jsx)(n.li,{children:"Object includes both Input and Constant type attributes"}),"\n",(0,r.jsxs)(n.li,{children:["Example: ",(0,r.jsx)(n.code,{children:"{ 'input-a-key': 10, 'input-b-key': 5 }"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Must return an object with calculated results"}),"\n",(0,r.jsxs)(n.li,{children:["Keys should match the ",(0,r.jsx)(n.code,{children:"key"})," properties of Formula attributes"]}),"\n",(0,r.jsx)(n.li,{children:"Values are the calculated results"}),"\n",(0,r.jsxs)(n.li,{children:["Example: ",(0,r.jsx)(n.code,{children:"{ 'formula-sum-key': 15, 'formula-product-key': 50 }"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"implementation-example",children:"Implementation Example"}),"\n",(0,r.jsx)(n.h4,{id:"apptsx",children:"App.tsx"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { PageBuilderReact, ComponentAttribute } from '@mindfiredigital/page-builder-react';\nimport { localExecuteFunction } from './utils/executeFormula';\n\nconst App = () => {\n  // Define attributes for a component\n  const dynamicAttributes: ComponentAttribute[] = [\n    // 1. Input Attribute A (number input)\n    {\n      id: 'input-a',\n      type: 'Input',\n      input_type: 'number',\n      title: 'Input A',\n      value: 10,\n      key: 'input-a-key',           // \u2190 Used in globalExecuteFunction input\n      execute_order: 1,\n      editable: true,\n      default_value: 10,\n    },\n\n    // 2. Input Attribute B\n    {\n      id: 'input-b',\n      type: 'Input',\n      input_type: 'number',\n      title: 'Input B',\n      value: 5,\n      key: 'input-b-key',           // \u2190 Used in globalExecuteFunction input\n      execute_order: 2,\n      editable: true,\n      default_value: 5,\n    },\n\n    // 3. Formula Attribute (SUM)\n    {\n      id: 'formula-sum',\n      type: 'Formula',\n      title: 'Total Sum',\n      value: '{Input A} + {Input B}',  // Formula string for display/debugging\n      key: 'formula-sum-key',         // \u2190 Returned from globalExecuteFunction\n      execute_order: 3,\n    },\n\n    // 4. Formula Attribute (PRODUCT)\n    {\n      id: 'formula-product',\n      type: 'Formula',\n      title: 'Total Product',\n      value: '{Input A} * {Input B}',\n      key: 'formula-product-key',     // \u2190 Returned from globalExecuteFunction\n      execute_order: 4,\n    },\n  ];\n\n  // Configure components with attributes\n  const dynamicComponents = {\n    Basic: [\n      { name: 'button' },\n      {\n        name: 'header',\n        attributes: dynamicAttributes,\n        globalExecuteFunction: localExecuteFunction\n      },\n      {\n        name: 'text',\n        attributes: dynamicAttributes,\n        globalExecuteFunction: localExecuteFunction\n      },\n      {\n        name: 'table',\n        attributes: dynamicAttributes,\n        globalExecuteFunction: localExecuteFunction\n      },\n    ],\n    Extra: ['landingpage'],\n  };\n\n  return (\n    <div>\n      <PageBuilderReact config={dynamicComponents} />\n    </div>\n  );\n};\n\nexport default App;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"utilsexecuteformulats",children:"utils/executeFormula.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * The global execution function that calculates formula attributes.\n * The keys in the inputValues object are the 'key' properties of the Input attributes.\n *\n * @param {object} inputValues - An object where keys are the 'key' (e.g., 'input-a-key') of Input attributes.\n * @returns {object} An object containing the calculated results, where keys are the 'key' of the Formula attributes.\n */\nexport const localExecuteFunction = (inputValues: {\n  'input-a-key': string | number | null;\n  'input-b-key': string | number | null;\n}) => {\n  // Extract and convert input values\n  const A = Number(inputValues['input-a-key']) || 0;\n  const B = Number(inputValues['input-b-key']) || 0;\n\n  // Perform calculations\n  const sumResult = A + B;\n  const productResult = A * B;\n\n  // Return object with 'key' properties of Formula attributes\n  return {\n    'formula-sum-key': sumResult,\n    'formula-product-key': productResult,\n  };\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Points in this Example:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input to globalExecuteFunction"}),": ",(0,r.jsx)(n.code,{children:"{ 'input-a-key': 10, 'input-b-key': 5 }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Output from globalExecuteFunction"}),": ",(0,r.jsx)(n.code,{children:"{ 'formula-sum-key': 15, 'formula-product-key': 50 }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Attribute Keys vs Titles"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"title"}),' is displayed to users in the Attribute Tab (e.g., "Input A", "Total Sum")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"})," is used internally in the ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"}),' (e.g., "input-a-key", "formula-sum-key")']}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multiple Components"}),": The same attributes can be reused across multiple components by passing the same ",(0,r.jsx)(n.code,{children:"dynamicAttributes"})," array"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trigger Events"}),": Each Input attribute can have a trigger event selected in the Attribute Tab that determines when ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"})," is called"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"calculation-flow",children:"Calculation Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"User modifies an Input attribute value"}),"\n",(0,r.jsx)(n.li,{children:"Selected trigger event fires (e.g., onChange)"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"globalExecuteFunction"})," is called with all Input values"]}),"\n",(0,r.jsx)(n.li,{children:"Function calculates Formula results using those inputs"}),"\n",(0,r.jsx)(n.li,{children:"Calculated values are returned to the Page Builder"}),"\n",(0,r.jsx)(n.li,{children:"Component updates to display new calculated values"}),"\n",(0,r.jsx)(n.li,{children:"Changes propagate to all seeded table cells"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"attribute-execution-order",children:"Attribute Execution Order"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"execute_order"})," property determines the ",(0,r.jsx)(n.strong,{children:"sequence in which attributes are processed"})," during calculation. This is critical when formulas depend on other formulas."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Rules:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Lower numbers execute first"}),"\n",(0,r.jsxs)(n.li,{children:["Attributes with the same ",(0,r.jsx)(n.code,{children:"execute_order"})," execute simultaneously"]}),"\n",(0,r.jsxs)(n.li,{children:["Formula attributes must have higher ",(0,r.jsx)(n.code,{children:"execute_order"})," than their dependencies"]}),"\n",(0,r.jsxs)(n.li,{children:["Input attributes typically have lower ",(0,r.jsx)(n.code,{children:"execute_order"})," than formulas"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example with Dependencies:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const dynamicAttributes: ComponentAttribute[] = [\n  // Order 1-2: Base inputs\n  {\n    id: 'input-a',\n    type: 'Input',\n    input_type: 'number',\n    title: 'Input A',\n    value: 10,\n    key: 'input-a-key',\n    execute_order: 1,\n    editable: true,\n    default_value: 10,\n  },\n  {\n    id: 'input-b',\n    type: 'Input',\n    input_type: 'number',\n    title: 'Input B',\n    value: 5,\n    key: 'input-b-key',\n    execute_order: 2,\n    editable: true,\n    default_value: 5,\n  },\n\n  // Order 3: Direct calculations from inputs\n  {\n    id: 'formula-sum',\n    type: 'Formula',\n    title: 'Total Sum',\n    value: '{Input A} + {Input B}',\n    key: 'formula-sum-key',\n    execute_order: 3,\n  },\n  {\n    id: 'formula-product',\n    type: 'Formula',\n    title: 'Total Product',\n    value: '{Input A} * {Input B}',\n    key: 'formula-product-key',\n    execute_order: 4,\n  },\n\n  // Order 5: Dependent calculation using previous formulas\n  {\n    id: 'formula-combined',\n    type: 'Formula',\n    title: 'Sum of Sum and Product',\n    value: '{Total Sum} + {Total Product}',\n    key: 'formula-combined-key',\n    execute_order: 5,\n  },\n];\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"editability-rules",children:"Editability Rules"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"editable"})," property controls whether users can modify an attribute's value in the Attribute Tab. This property has ",(0,r.jsx)(n.strong,{children:"different implications depending on attribute type"}),":"]}),"\n",(0,r.jsx)(n.h3,{id:"for-input-attributes",children:"For Input Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"editable: true"})," (default)"]}),": Field is fully editable; users can change the value, and changes trigger calculations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"editable: false"})}),": Field is read-only; users see the value but cannot modify it; still triggers events if other inputs change"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"{\n  id: 'calculated-input',\n  type: 'Input',\n  input_type: 'number',\n  title: 'Calculated Value',\n  value: 0,\n  key: 'calculated-value-key',\n  execute_order: 3,\n  editable: false  // User cannot edit; calculated by system\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"for-constant-attributes",children:"For Constant Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"editable"})," property is ",(0,r.jsx)(n.strong,{children:"not applicable"})," to Constants"]}),"\n",(0,r.jsx)(n.li,{children:"Constants display their value in the component"}),"\n",(0,r.jsxs)(n.li,{children:["During calculations, the ",(0,r.jsx)(n.strong,{children:"original constant value is always used"}),", not any edited UI value"]}),"\n",(0,r.jsx)(n.li,{children:"You can change the visual display in the UI for UX purposes, but formulas reference the actual constant"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"{\n  id: 'multiplier-const',\n  type: 'Constant',\n  input_type: 'number',\n  title: 'Multiplier',\n  value: 2,\n  key: 'multiplier',\n  execute_order: 1\n  // Editability doesn't apply; value is always 2 in calculations\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"for-formula-and-image-attributes",children:"For Formula and Image Attributes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Always ",(0,r.jsx)(n.code,{children:"editable: false"})]})," (implicit)"]}),"\n",(0,r.jsx)(n.li,{children:"Formulas are computed; their values cannot be manually changed"}),"\n",(0,r.jsx)(n.li,{children:"Images are static; their URLs cannot be edited through attributes"}),"\n",(0,r.jsx)(n.li,{children:"Both types are read-only in the UI"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"complete-integration-example",children:"Complete Integration Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a comprehensive example showing how all pieces work together:"}),"\n",(0,r.jsx)(n.h4,{id:"apptsx-1",children:"App.tsx"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { PageBuilderReact, ComponentAttribute } from '@mindfiredigital/page-builder-react';\nimport { localExecuteFunction } from './utils/executeFormula';\n\nconst App = () => {\n  const dynamicAttributes: ComponentAttribute[] = [\n    // 1. Input Attribute A (Renders a 'number' input in the Attributes Tab)\n    {\n      id: 'input-a',\n      type: 'Input',\n      input_type: 'number',\n      title: 'Input A',\n      value: 10,\n      key: 'input-a-key',\n      execute_order: 1,\n      editable: true,\n      default_value: 10,\n    },\n    // 2. Input Attribute B\n    {\n      id: 'input-b',\n      type: 'Input',\n      input_type: 'number',\n      title: 'Input B',\n      value: 5,\n      key: 'input-b-key',\n      execute_order: 2,\n      editable: true,\n      default_value: 5,\n    },\n    // 3. Formula Attribute (SUM) - This is calculated by localExecuteFunction\n    {\n      id: 'formula-sum',\n      type: 'Formula',\n      title: 'Total Sum',\n      value: '{Input A} + {Input B}', // The formula string (used for display/debug)\n      key: 'formula-sum-key',\n      execute_order: 3,\n    },\n    // 4. Formula Attribute (PRODUCT)\n    {\n      id: 'formula-product',\n      type: 'Formula',\n      title: 'Total Product',\n      value: '{Input A} * {Input B}',\n      key: 'formula-product-key',\n      execute_order: 4,\n    },\n  ];\n\n  const dynamicComponents = {\n    Basic: [\n      { name: 'button' },\n      {\n        name: 'header',\n        attributes: dynamicAttributes,\n        globalExecuteFunction: localExecuteFunction\n      },\n      {\n        name: 'text',\n        attributes: dynamicAttributes,\n        globalExecuteFunction: localExecuteFunction\n      },\n      {\n        name: 'table',\n        attributes: dynamicAttributes,\n        globalExecuteFunction: localExecuteFunction\n      },\n    ],\n    Extra: ['landingpage'],\n  };\n\n  return (\n    <div>\n      <PageBuilderReact config={dynamicComponents} />\n    </div>\n  );\n};\n\nexport default App;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"utilsexecuteformulats-1",children:"utils/executeFormula.ts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * The global execution function that calculates formula attributes.\n * The keys in the inputValues object are the 'key' properties of the Input attributes.\n *\n * @param {object} inputValues - An object where keys are the 'key' (e.g., 'input-a-key') of Input attributes.\n * @returns {object} An object containing the calculated results, where keys are the 'key' of the Formula attributes.\n */\nexport const localExecuteFunction = (inputValues: {\n  'input-a-key': string | number | null;\n  'input-b-key': string | number | null;\n}) => {\n  const A = Number(inputValues['input-a-key']) || 0;\n  const B = Number(inputValues['input-b-key']) || 0;\n\n  const sumResult = A + B;\n  const productResult = A * B;\n\n  return {\n    'formula-sum-key': sumResult,\n    'formula-product-key': productResult,\n  };\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Points in this Example:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input to globalExecuteFunction"}),": ",(0,r.jsx)(n.code,{children:"{ 'input-a-key': 10, 'input-b-key': 5 }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Output from globalExecuteFunction"}),": ",(0,r.jsx)(n.code,{children:"{ 'formula-sum-key': 15, 'formula-product-key': 50 }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"In Component Settings Modal"}),": When you click on a table cell, you see attributes listed by their ",(0,r.jsx)(n.code,{children:"title"}),' (e.g., "Input A", "Total Sum")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"In Attribute Tab"}),": Input attributes display by their ",(0,r.jsx)(n.code,{children:"title"})," with input fields based on ",(0,r.jsx)(n.code,{children:"input_type"}),", and each has a trigger event selector"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"In Table Cells"}),": When you seed an attribute to a cell, it displays the calculated value from ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"})," using that attribute's ",(0,r.jsx)(n.code,{children:"key"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reusability"}),": The same ",(0,r.jsx)(n.code,{children:"dynamicAttributes"})," and ",(0,r.jsx)(n.code,{children:"localExecuteFunction"})," are applied to multiple components (header, text, table)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code Organization"}),": Calculation logic is separated into its own utility file for better maintainability"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"organizing-attributes",children:"Organizing Attributes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Group by dependency"}),": Place independent attributes first, then dependent formulas"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use consistent naming"}),": Make ",(0,r.jsx)(n.code,{children:"title"})," and ",(0,r.jsx)(n.code,{children:"key"})," descriptive and related"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set appropriate execute_order"}),": Always ensure formulas execute after their dependencies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Document complex formulas"}),": Use clear formula strings that are easy to understand"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"working-with-user-input",children:"Working with User Input"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validate input ranges"}),": In your ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"}),", validate that inputs are within acceptable ranges"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle edge cases"}),": Account for zero values, negative numbers, and null inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provide clear labels"}),": Use descriptive ",(0,r.jsx)(n.code,{children:"title"})," values so users understand what each attribute does"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set sensible defaults"}),": Use reasonable ",(0,r.jsx)(n.code,{children:"value"})," defaults for better UX"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minimize calculations"}),": Only calculate what's necessary; avoid redundant formulas"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use appropriate trigger events"}),': Avoid "On Input (Real-time)" for expensive calculations; use "On Blur" instead']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lazy execution"}),": Only execute formulas when relevant attributes change"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memoize results"}),": In your ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"}),", cache intermediate results if used multiple times"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const robustCalculation = (inputValues: Record<string, any>) => {\n  try {\n    const A = Number(inputValues['input-a-key']) || 0;\n    const B = Number(inputValues['input-b-key']) || 0;\n\n    if (A < 0 || B < 0) {\n      throw new Error('Inputs cannot be negative');\n    }\n\n    const sumResult = A + B;\n    const productResult = A * B;\n\n    return {\n      'formula-sum-key': sumResult,\n      'formula-product-key': productResult,\n    };\n  } catch (error) {\n    console.error('Calculation error:', error);\n    return {\n      'formula-sum-key': 0,\n      'formula-product-key': 0,\n    };\n  }\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"The Dynamic Attributes system provides a flexible, powerful way to create data-driven components:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Attribute Types"}),": Choose from Constant, Input, Formula, or Image types based on your needs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Seeding"}),": Bind attributes to component cells to display live, calculated data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event-Driven Calculations"}),": Trigger complex computations when users interact with inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Controlled Editability"}),": Fine-grained control over what users can modify"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Execution Order"}),": Ensure formulas calculate in the correct sequence"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Custom Functions"}),": Implement your own calculation logic through ",(0,r.jsx)(n.code,{children:"globalExecuteFunction"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This system enables you to build sophisticated, interactive components that respond to user input in real-time while maintaining data consistency and calculation accuracy."})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const r={},l=i.createContext(r);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}},9834:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/attribute-input-table-6fcc033d05eff36f776478c7301e0d9b.png"}}]);