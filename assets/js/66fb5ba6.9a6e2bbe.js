"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4551],{472:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/view-attribute-eed3c64420a48d7f6432f50891149a06.png"},3775:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/view-78151da7f49c324097a25f1dc46df852.png"},7232:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"configuration/features/view-mode","title":"View Mode (Read-Only)","description":"The Page Builder supports a dedicated View Mode, which permanently disables all editing capabilities for published designs. This mode is distinct from the Preview Mode button, which temporarily shows how a design looks during the creation process.","source":"@site/docs/configuration/features/view-mode.md","sourceDirName":"configuration/features","slug":"/configuration/features/view-mode","permalink":"/page-builder/docs/configuration/features/view-mode","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Customization and Styling","permalink":"/page-builder/docs/configuration/features/styling-components"},"next":{"title":"Dynamic Attributes","permalink":"/page-builder/docs/configuration/features/attributes-formulas"}}');var t=i(4848),r=i(8453);const d={},l="View Mode (Read-Only)",o={},a=[{value:"Overview",id:"overview",level:2},{value:"When to Use View Mode",id:"when-to-use-view-mode",level:3},{value:"Disabled Features in View Mode",id:"disabled-features-in-view-mode",level:2},{value:"Enabling View Mode",id:"enabling-view-mode",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Attribute Tab in View Mode",id:"attribute-tab-in-view-mode",level:2},{value:"Enabling Attribute Tab",id:"enabling-attribute-tab",level:3},{value:"Attribute Tab Behavior in View Mode",id:"attribute-tab-behavior-in-view-mode",level:3},{value:"Props Reference",id:"props-reference",level:2},{value:"Visual Examples",id:"visual-examples",level:2},{value:"View Mode With Attribute Tab",id:"view-mode-with-attribute-tab",level:3},{value:"View Mode Without Attribute Tab",id:"view-mode-without-attribute-tab",level:3},{value:"Typical Workflow",id:"typical-workflow",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"1. Publishing System",id:"1-publishing-system",level:3},{value:"2. Role-Based Access Control",id:"2-role-based-access-control",level:3},{value:"3. Template Distribution",id:"3-template-distribution",level:3},{value:"4. Approval Workflow",id:"4-approval-workflow",level:3},{value:"5. Version History",id:"5-version-history",level:3},{value:"6. Multi-Environment Deployment",id:"6-multi-environment-deployment",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Pattern 1: Simple Publish Toggle",id:"pattern-1-simple-publish-toggle",level:3},{value:"Pattern 2: Permission-Based Access",id:"pattern-2-permission-based-access",level:3},{value:"Pattern 3: Status-Driven Mode",id:"pattern-3-status-driven-mode",level:3},{value:"Notes",id:"notes",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"view-mode-read-only",children:"View Mode (Read-Only)"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Page Builder"})," supports a dedicated ",(0,t.jsx)(n.strong,{children:"View Mode"}),", which permanently disables all editing capabilities for published designs. This mode is distinct from the ",(0,t.jsx)(n.strong,{children:"Preview Mode"})," button, which temporarily shows how a design looks during the creation process."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"View Mode vs Preview Mode:"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Preview Mode"}),(0,t.jsx)(n.th,{children:"View Mode"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Purpose"}),(0,t.jsx)(n.td,{children:"Temporary preview during design creation"}),(0,t.jsx)(n.td,{children:"Permanent read-only state after publishing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Access"}),(0,t.jsx)(n.td,{children:"Available via Preview button in editor"}),(0,t.jsx)(n.td,{children:"Enabled programmatically via props"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Use Case"}),(0,t.jsx)(n.td,{children:"Designer checks their work in progress"}),(0,t.jsx)(n.td,{children:"Published design locked for end users"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Reversible"}),(0,t.jsx)(n.td,{children:"Yes - return to edit mode anytime"}),(0,t.jsx)(n.td,{children:"Controlled by application logic"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"when-to-use-view-mode",children:"When to Use View Mode"}),"\n",(0,t.jsxs)(n.p,{children:["View Mode is designed for ",(0,t.jsx)(n.strong,{children:"post-publication scenarios"})," where you want to:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lock published designs"})," to prevent unauthorized modifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deploy completed pages"})," to production environments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Share finalized content"})," with users who should only consume, not edit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Archive approved designs"})," while maintaining visibility"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create read-only instances"})," of templates or published content"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"disabled-features-in-view-mode",children:"Disabled Features in View Mode"}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.strong,{children:"View Mode"})," is active, the following actions are disabled:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Drag & Drop"}),": Users cannot move, add, or rearrange components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Component Selection"}),": Components cannot be selected on the canvas"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Styling/Settings"}),": The Sidebar/Settings Panel is hidden or inactive"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resizing/Interaction"}),": Component resizing handles, editing borders, and other interactive editing controls are suppressed"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The design is rendered as a clean, final output ready for ",(0,t.jsx)(n.strong,{children:"presentation or embedding"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"enabling-view-mode",children:"Enabling View Mode"}),"\n",(0,t.jsxs)(n.p,{children:["You can enable View Mode by passing the ",(0,t.jsx)(n.code,{children:"editable"})," prop to the ",(0,t.jsx)(n.code,{children:"PageBuilderReact"})," component."]}),"\n",(0,t.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { PageBuilderReact } from '@mindfiredigital/page-builder-react';\n\nconst App = () => {\n  return (\n    <div>\n      <PageBuilderReact editable={false} />\n    </div>\n  );\n};\n\nexport default App;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"attribute-tab-in-view-mode",children:"Attribute Tab in View Mode"}),"\n",(0,t.jsxs)(n.p,{children:["While View Mode disables editing capabilities, you can still provide access to the ",(0,t.jsx)(n.strong,{children:"Attribute Tab"})," for viewing component properties and details. This is useful when you want users to inspect component configurations without the ability to modify them."]}),"\n",(0,t.jsx)(n.h3,{id:"enabling-attribute-tab",children:"Enabling Attribute Tab"}),"\n",(0,t.jsxs)(n.p,{children:["Set the ",(0,t.jsx)(n.code,{children:"showAttributeTab"})," prop to ",(0,t.jsx)(n.code,{children:"true"})," along with ",(0,t.jsx)(n.code,{children:"editable={false}"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { PageBuilderReact } from '@mindfiredigital/page-builder-react';\n\nconst App = () => {\n  const dynamicComponents = {\n    Basic: [\n      { name: 'button' },\n      { name: 'header' },\n      { name: 'text' },\n      { name: 'table' },\n    ],\n    Extra: ['landingpage'],\n  };\n\n  return (\n    <div>\n      <PageBuilderReact\n        showAttributeTab={true}\n        editable={false}\n        config={dynamicComponents}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"attribute-tab-behavior-in-view-mode",children:"Attribute Tab Behavior in View Mode"}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"showAttributeTab={true}"})," is set in View Mode:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u2705 Users can ",(0,t.jsx)(n.strong,{children:"view"})," component attributes and properties"]}),"\n",(0,t.jsx)(n.li,{children:"\u2705 The attribute panel displays component configurations"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Component details remain accessible for inspection"}),"\n",(0,t.jsxs)(n.li,{children:["\u274c Users ",(0,t.jsx)(n.strong,{children:"cannot modify"})," any attributes or settings"]}),"\n",(0,t.jsx)(n.li,{children:"\u274c All input fields and controls remain disabled"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"props-reference",children:"Props Reference"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Prop"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"editable"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsx)(n.td,{children:"Controls whether the page builder is in edit mode or view mode"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"showAttributeTab"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"false"})}),(0,t.jsx)(n.td,{children:"Shows the attribute tab in view mode for inspecting component properties"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Configuration object for available components"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"visual-examples",children:"Visual Examples"}),"\n",(0,t.jsx)(n.h3,{id:"view-mode-with-attribute-tab",children:"View Mode With Attribute Tab"}),"\n",(0,t.jsxs)(n.p,{children:["When both ",(0,t.jsx)(n.code,{children:"editable={false}"})," and ",(0,t.jsx)(n.code,{children:"showAttributeTab={true}"})," are set, users can access a read-only attribute panel to inspect component properties while the canvas remains non-editable."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example: Salary Structure View"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"View Mode with Attribute Tab - Salary Table",src:i(472).A+"",width:"1578",height:"887"}),"\n",(0,t.jsx)(n.em,{children:"Figure 1: View Mode displaying a salary structure table with attribute tab enabled. Users can view component details but cannot edit them."})]}),"\n",(0,t.jsx)(n.p,{children:'The above example shows a professional salary breakdown for "Sagarika Rout" displayed in View Mode. Notice how:'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The canvas displays the final rendered design cleanly"}),"\n",(0,t.jsx)(n.li,{children:"The attribute tab is accessible on the right side"}),"\n",(0,t.jsx)(n.li,{children:"All editing controls (drag handles, resize controls, etc.) are hidden"}),"\n",(0,t.jsx)(n.li,{children:"The design maintains its formatting and structure"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"view-mode-without-attribute-tab",children:"View Mode Without Attribute Tab"}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"editable={false}"})," and ",(0,t.jsx)(n.code,{children:"showAttributeTab"})," is not set or ",(0,t.jsx)(n.code,{children:"false"}),", the page displays in pure presentation mode with no sidebar or controls."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example: Clean Canvas View"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"View Mode without Attribute Tab - Clean Canvas",src:i(3775).A+"",width:"1581",height:"900"}),"\n",(0,t.jsx)(n.em,{children:"Figure 2: Pure view mode with no attribute tab - minimal, distraction-free display."})]}),"\n",(0,t.jsx)(n.p,{children:"In this example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The canvas area is completely clean and uncluttered"}),"\n",(0,t.jsx)(n.li,{children:"No sidebars or panels are visible"}),"\n",(0,t.jsx)(n.li,{children:"The focus is entirely on the rendered content"}),"\n",(0,t.jsx)(n.li,{children:"Perfect for embedding or full-screen presentations"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"typical-workflow",children:"Typical Workflow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Design Phase"}),": User creates and edits the design with ",(0,t.jsx)(n.code,{children:"editable={true}"})," (default)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Preview Phase"}),": User uses the built-in Preview button to check the design"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Publish Phase"}),": User completes the design and publishes it"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"View Mode"}),": Application switches to ",(0,t.jsx)(n.code,{children:"editable={false}"})," to lock the published design"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consumption"}),": End users view the locked, non-editable version"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsx)(n.h3,{id:"1-publishing-system",children:"1. Publishing System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const PublishedPage = ({ pageId, isPublished }) => {\n  return <PageBuilderReact editable={!isPublished} pageId={pageId} />;\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario"}),': A content creator designs a landing page. Once satisfied, they click "Publish". The system sets ',(0,t.jsx)(n.code,{children:"editable={false}"}),", locking the design for all subsequent viewers."]}),"\n",(0,t.jsx)(n.h3,{id:"2-role-based-access-control",children:"2. Role-Based Access Control"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const RoleBasedPageBuilder = ({ userRole }) => {\n  const canEdit = userRole === 'admin' || userRole === 'editor';\n\n  return (\n    <PageBuilderReact\n      editable={canEdit}\n      showAttributeTab={userRole === 'viewer' || userRole === 'reviewer'}\n    />\n  );\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario"}),": Admins and editors can modify designs, while viewers and reviewers can only inspect (with attribute tab) or view the content."]}),"\n",(0,t.jsx)(n.h3,{id:"3-template-distribution",children:"3. Template Distribution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const TemplateViewer = ({ templateId }) => {\n  return (\n    <PageBuilderReact\n      editable={false}\n      showAttributeTab={true}\n      templateId={templateId}\n    />\n  );\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario"}),": Distribute approved templates to users who need to see the structure and configuration but cannot modify the master template."]}),"\n",(0,t.jsx)(n.h3,{id:"4-approval-workflow",children:"4. Approval Workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const ApprovalWorkflow = ({ designStatus }) => {\n  const isApproved = designStatus === 'approved';\n\n  return <PageBuilderReact editable={!isApproved} showAttributeTab={true} />;\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario"}),": Designs go through an approval process. Once approved, they're locked (",(0,t.jsx)(n.code,{children:"editable={false}"}),") to prevent further changes while reviewers can still inspect attributes."]}),"\n",(0,t.jsx)(n.h3,{id:"5-version-history",children:"5. Version History"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const VersionHistory = ({ version, isCurrentVersion }) => {\n  return (\n    <PageBuilderReact\n      editable={isCurrentVersion}\n      version={version}\n      showAttributeTab={true}\n    />\n  );\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario"}),": Users can view historical versions of a design in read-only mode, with only the current version being editable."]}),"\n",(0,t.jsx)(n.h3,{id:"6-multi-environment-deployment",children:"6. Multi-Environment Deployment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const EnvironmentBasedBuilder = () => {\n  const isDevelopment = process.env.NODE_ENV === 'development';\n\n  return (\n    <PageBuilderReact\n      editable={isDevelopment}\n      showAttributeTab={isDevelopment}\n    />\n  );\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scenario"}),": Development environment allows editing, while staging and production environments display locked versions."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Distinguish from Preview"}),": Remember that Preview Mode (button in editor) is for checking work during design, while View Mode is for locking published content"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement publish workflows"}),": Use View Mode as part of a publishing system where designs transition from editable to locked"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consider role-based access"}),": Tie ",(0,t.jsx)(n.code,{children:"editable"})," prop to user permissions and roles"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enable Attribute Tab selectively"}),": Use ",(0,t.jsx)(n.code,{children:"showAttributeTab={true}"})," when users need to inspect configurations without editing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Version control"}),": Keep editable versions separate from published, locked versions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Audit trail"}),": Log when designs transition from editable to view mode (published state)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Conditional rendering"}),": Dynamically control ",(0,t.jsx)(n.code,{children:"editable"})," based on application state, user role, or environment"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"pattern-1-simple-publish-toggle",children:"Pattern 1: Simple Publish Toggle"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const [isPublished, setIsPublished] = useState(false);\n\nconst handlePublish = () => {\n  // Save design to database\n  saveDesign();\n  // Lock the design\n  setIsPublished(true);\n};\n\nreturn (\n  <>\n    {!isPublished && <button onClick={handlePublish}>Publish Design</button>}\n    <PageBuilderReact editable={!isPublished} />\n  </>\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"pattern-2-permission-based-access",children:"Pattern 2: Permission-Based Access"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const { user } = useAuth();\nconst canEdit = user.permissions.includes('edit_designs');\n\nreturn <PageBuilderReact editable={canEdit} showAttributeTab={!canEdit} />;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"pattern-3-status-driven-mode",children:"Pattern 3: Status-Driven Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const { design } = useDesign(designId);\nconst isEditable = design.status === 'draft';\n\nreturn (\n  <PageBuilderReact\n    editable={isEditable}\n    showAttributeTab={design.status === 'published'}\n  />\n);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"View Mode is not the same as Preview Mode"}),": Preview Mode is a temporary view during design creation (accessed via button), while View Mode is a permanent locked state for published designs"]}),"\n",(0,t.jsx)(n.li,{children:"View Mode does not affect the underlying data structure; it only controls whether editing is allowed"}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"editable"})," prop can be toggled dynamically based on your application's business logic"]}),"\n",(0,t.jsx)(n.li,{children:"All component functionality remains active in View Mode; only editing controls are disabled"}),"\n",(0,t.jsx)(n.li,{children:'Consider implementing a "Publish" workflow that transitions designs from editable to view mode'}),"\n",(0,t.jsx)(n.li,{children:"View Mode is ideal for production environments where end users should consume content, not modify it"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);