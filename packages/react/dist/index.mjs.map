{"version":3,"sources":["../src/components/PageBuilder.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport {\n  PageBuilderReactProps,\n  DynamicComponents,\n  PageBuilderDesign,\n  PageBuilderElement,\n} from '../types/types';\n\nexport const PageBuilderReact: React.FC<PageBuilderReactProps> = ({\n  config,\n  customComponents,\n  initialDesign,\n  onChange,\n}) => {\n  const builderRef = useRef<PageBuilderElement>(null);\n  const [processedConfig, setProcessedConfig] =\n    useState<DynamicComponents>(config);\n\n  useEffect(() => {\n    import('@mindfiredigital/page-builder-web-component').catch(error => {\n      console.error('Failed to load web component:', error);\n    });\n  }, []);\n\n  useEffect(() => {\n    // Create a copy of the original config\n    const modifiedConfig: DynamicComponents | any = JSON.parse(\n      JSON.stringify(config)\n    );\n\n    // Merge custom components if provided\n    if (customComponents) {\n      // Ensure Custom property exists\n      modifiedConfig.Custom = modifiedConfig.Custom || {};\n\n      // Process each custom component\n      Object.entries(customComponents).forEach(([key, componentConfig]) => {\n        // Skip if component is not valid\n        if (!componentConfig.component) {\n          console.warn(`Skipping invalid component: ${key}`);\n          return;\n        }\n\n        // Create unique tag name for the Web Component\n        const tagName = `react-component-${key.toLowerCase()}`;\n\n        // Create custom element if not exists\n        if (!customElements.get(tagName)) {\n          class ReactComponentElement extends HTMLElement {\n            // This `this` refers to the instance of the Web Component (e.g., <react-component-customrating id=\"CustomRating1\">)\n            connectedCallback() {\n              const mountPoint = document.createElement('div');\n              this.appendChild(mountPoint);\n\n              // Get the ID of this Web Component instance\n              const componentId = this.id;\n\n              try {\n                // Render the React component into the mountPoint,\n                // passing the componentId as a prop\n                ReactDOM.createRoot(mountPoint).render(\n                  React.createElement(componentConfig.component, {\n                    componentId: componentId,\n                  })\n                );\n              } catch (error) {\n                console.error(`Error rendering ${key} component:`, error);\n              }\n            }\n          }\n\n          // Define custom element\n          customElements.define(tagName, ReactComponentElement);\n        }\n\n        // Add to Custom components with web component tag\n        modifiedConfig.Custom[key] = {\n          component: tagName, // The tagName refers to the custom Web Component tag\n          svg: componentConfig.svg,\n          title: componentConfig.title,\n        };\n      });\n    }\n\n    // Update state and set config\n    setProcessedConfig(modifiedConfig);\n  }, [config, customComponents]);\n\n  // Effect to set config on web component\n  useEffect(() => {\n    if (builderRef.current) {\n      setTimeout(() => {\n        try {\n          const configString = JSON.stringify(processedConfig);\n          builderRef.current?.setAttribute('config-data', configString);\n          if (builderRef.current) {\n            builderRef.current.initialDesign = initialDesign;\n            console.log(initialDesign, 'init');\n          }\n        } catch (error) {\n          console.error('Error setting config-data and initialDesign:', error);\n        }\n      }, 100); // Delay initialization\n    }\n  }, [processedConfig, initialDesign]);\n\n  useEffect(() => {\n    const webComponent = builderRef.current;\n\n    const handleDesignChange = (event: Event) => {\n      const customEvent = event as CustomEvent<PageBuilderDesign>;\n      if (onChange) {\n        onChange(customEvent.detail);\n      }\n    };\n\n    if (webComponent) {\n      webComponent.addEventListener('design-change', handleDesignChange);\n    }\n\n    return () => {\n      if (webComponent) {\n        webComponent.removeEventListener('design-change', handleDesignChange);\n      }\n    };\n  }, [onChange]);\n\n  return <page-builder ref={builderRef} />;\n};\n"],"mappings":";AAAA,OAAO,SAAS,WAAW,QAAQ,gBAAgB;AACnD,OAAO,cAAc;AAQd,IAAM,mBAAoD,CAAC;AAAA,EAChE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,QAAM,aAAa,OAA2B,IAAI;AAClD,QAAM,CAAC,iBAAiB,kBAAkB,IACxC,SAA4B,MAAM;AAEpC,YAAU,MAAM;AACd,WAAO,6CAA6C,EAAE,MAAM,WAAS;AACnE,cAAQ,MAAM,iCAAiC,KAAK;AAAA,IACtD,CAAC;AAAA,EACH,GAAG,CAAC,CAAC;AAEL,YAAU,MAAM;AAEd,UAAM,iBAA0C,KAAK;AAAA,MACnD,KAAK,UAAU,MAAM;AAAA,IACvB;AAGA,QAAI,kBAAkB;AAEpB,qBAAe,SAAS,eAAe,UAAU,CAAC;AAGlD,aAAO,QAAQ,gBAAgB,EAAE,QAAQ,CAAC,CAAC,KAAK,eAAe,MAAM;AAEnE,YAAI,CAAC,gBAAgB,WAAW;AAC9B,kBAAQ,KAAK,+BAA+B,KAAK;AACjD;AAAA,QACF;AAGA,cAAM,UAAU,mBAAmB,IAAI,YAAY;AAGnD,YAAI,CAAC,eAAe,IAAI,OAAO,GAAG;AAChC,gBAAM,8BAA8B,YAAY;AAAA;AAAA,YAE9C,oBAAoB;AAClB,oBAAM,aAAa,SAAS,cAAc,KAAK;AAC/C,mBAAK,YAAY,UAAU;AAG3B,oBAAM,cAAc,KAAK;AAEzB,kBAAI;AAGF,yBAAS,WAAW,UAAU,EAAE;AAAA,kBAC9B,MAAM,cAAc,gBAAgB,WAAW;AAAA,oBAC7C;AAAA,kBACF,CAAC;AAAA,gBACH;AAAA,cACF,SAAS,OAAP;AACA,wBAAQ,MAAM,mBAAmB,kBAAkB,KAAK;AAAA,cAC1D;AAAA,YACF;AAAA,UACF;AAGA,yBAAe,OAAO,SAAS,qBAAqB;AAAA,QACtD;AAGA,uBAAe,OAAO,GAAG,IAAI;AAAA,UAC3B,WAAW;AAAA;AAAA,UACX,KAAK,gBAAgB;AAAA,UACrB,OAAO,gBAAgB;AAAA,QACzB;AAAA,MACF,CAAC;AAAA,IACH;AAGA,uBAAmB,cAAc;AAAA,EACnC,GAAG,CAAC,QAAQ,gBAAgB,CAAC;AAG7B,YAAU,MAAM;AACd,QAAI,WAAW,SAAS;AACtB,iBAAW,MAAM;AA5FvB;AA6FQ,YAAI;AACF,gBAAM,eAAe,KAAK,UAAU,eAAe;AACnD,2BAAW,YAAX,mBAAoB,aAAa,eAAe;AAChD,cAAI,WAAW,SAAS;AACtB,uBAAW,QAAQ,gBAAgB;AACnC,oBAAQ,IAAI,eAAe,MAAM;AAAA,UACnC;AAAA,QACF,SAAS,OAAP;AACA,kBAAQ,MAAM,gDAAgD,KAAK;AAAA,QACrE;AAAA,MACF,GAAG,GAAG;AAAA,IACR;AAAA,EACF,GAAG,CAAC,iBAAiB,aAAa,CAAC;AAEnC,YAAU,MAAM;AACd,UAAM,eAAe,WAAW;AAEhC,UAAM,qBAAqB,CAAC,UAAiB;AAC3C,YAAM,cAAc;AACpB,UAAI,UAAU;AACZ,iBAAS,YAAY,MAAM;AAAA,MAC7B;AAAA,IACF;AAEA,QAAI,cAAc;AAChB,mBAAa,iBAAiB,iBAAiB,kBAAkB;AAAA,IACnE;AAEA,WAAO,MAAM;AACX,UAAI,cAAc;AAChB,qBAAa,oBAAoB,iBAAiB,kBAAkB;AAAA,MACtE;AAAA,IACF;AAAA,EACF,GAAG,CAAC,QAAQ,CAAC;AAEb,SAAO,oCAAC,kBAAa,KAAK,YAAY;AACxC;","names":[]}