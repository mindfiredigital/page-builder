{"version":3,"sources":["../src/components/PageBuilder.ts"],"sourcesContent":["// import { PageBuilder } from '@mindfiredigital/page-builder/dist/PageBuilder.js';\n\n// export interface PageBuilderDesign {\n//   pages?: Array<{\n//     id: string;\n//     components: Array<{\n//       type: string;\n//       id: string;\n//       props: Record<string, any>;\n//     }>;\n//   }>;\n//   [key: string]: any;\n// }\n// export class PageBuilderComponent extends HTMLElement {\n//   private pageBuilder!: PageBuilder;\n//   private initialized = false;\n//   private _initialDesign: PageBuilderDesign | null = null;\n//   private _editable: boolean | null = null;\n//   private _brandTitle?: string;\n//   private _showAttributeTab?: boolean;\n//   private config = { Basic: [], Extra: [], Custom: [] };\n//   private template = `<div id=\"app\">\n//       <div id=\"sidebar\"></div>\n//       <div id=\"canvas\" class=\"canvas\"></div>\n//       <div id=\"customization\">\n//         <h4 id=\"component-name\">Component: None</h4>\n//         <div id=\"controls\"></div>\n//         <div id=\"layers-view\" class=\"hidden\"></div>\n//       </div>\n//       <div id=\"notification\" class=\"notification hidden\"></div>\n//       <div id=\"dialog\" class=\"dialog hidden\">\n//         <div class=\"dialog-content\">\n//           <p id=\"dialog-message\"></p>\n//           <button id=\"dialog-yes\" class=\"dialog-btn\">Yes</button>\n//           <button id=\"dialog-no\" class=\"dialog-btn\">No</button>\n//         </div>\n//       </div>\n//     </div>`;\n\n//   constructor() {\n//     super();\n//     // Set inner HTML only if no child elements exist\n//   }\n\n//   set editable(value: boolean | null) {\n//     if (this._editable !== value) {\n//       this._editable = value;\n//       if (this.initialized) {\n//         this.initialized = false;\n//         this.initializePageBuilder();\n//       }\n//     }\n//   }\n\n//   // Corrected getter for 'editable'\n//   get editable(): boolean | null {\n//     return this._editable;\n//   }\n\n//   set brandTitle(value: string | undefined) {\n//     if (this._brandTitle !== value) {\n//       this._brandTitle = value;\n//       if (this.initialized) {\n//         this.initialized = false;\n//         this.initializePageBuilder();\n//       }\n//     }\n//   }\n\n//   get brandTitle(): string | undefined {\n//     return this._brandTitle;\n//   }\n\n//   set showAttributeTab(value: boolean | undefined) {\n//     if (this._showAttributeTab !== value) {\n//       this._showAttributeTab = value;\n//       if (this.initialized) {\n//         this.initialized = false;\n//         this.initializePageBuilder();\n//       }\n//     }\n//   }\n\n//   get showAttributeTab(): boolean | undefined {\n//     return this._showAttributeTab;\n//   }\n\n//   set initialDesign(value: PageBuilderDesign | null) {\n//     if (this._initialDesign !== value) {\n//       this._initialDesign = value;\n//       if (this.initialized) {\n//         this.initialized = false;\n//         if (value !== null || this.initialized) {\n//           this.initialized = false;\n//           this.initializePageBuilder();\n//         }\n//       }\n//     }\n//   }\n\n//   get initialDesign(): PageBuilderDesign | null {\n//     return this._initialDesign;\n//   }\n\n//   // Lifecycle method: Called when the element is added to the DOM\n//   connectedCallback() {\n//     if (this.initialized) {\n//       return;\n//     }\n\n//     setTimeout(() => {\n//       if (!this.firstElementChild) {\n//         this.innerHTML = this.template;\n//       }\n\n//       if (this.hasValidConfig()) {\n//         this.initializePageBuilder();\n//       }\n//     }, 0);\n//   }\n\n//   private hasValidConfig(): boolean {\n//     return (\n//       this.config &&\n//       (this.config.Basic?.length > 0 ||\n//         this.config.Extra?.length > 0 ||\n//         (this.config.Custom && Object.keys(this.config.Custom).length > 0))\n//     );\n//   }\n\n//   set configData(value: any) {\n//     this.config = value;\n//     this.initialized = false;\n//     this.initializePageBuilder();\n//   }\n\n//   get configData() {\n//     return this.config;\n//   }\n//   // Initializes the PageBuilder instance\n//   private initializePageBuilder() {\n\n//     try {\n//       const app = this.querySelector('#app');\n//       if (app === null) {\n//         console.error('Error: #app element not found.');\n//         return;\n//       }\n//       if (app && this.pageBuilder) {\n//         app.innerHTML = '';\n//         this.innerHTML = this.template;\n//       }\n//       this.pageBuilder = new PageBuilder(\n//         this.config,\n//         this._initialDesign,\n//         this._editable,\n//         this._brandTitle,\n//         this.showAttributeTab\n//       );\n//       this.initialized = true;\n//     } catch (error) {\n//       console.error('Failed to initialize PageBuilder:', error);\n//       this.initialized = false;\n//     }\n//   }\n// }\n\n// // Define the custom element if it hasn't been registered already\n// if (!customElements.get('page-builder')) {\n//   customElements.define('page-builder', PageBuilderComponent);\n// }\nimport { PageBuilder } from '@mindfiredigital/page-builder/dist/PageBuilder.js';\n\nexport interface PageBuilderDesign {\n  pages?: Array<{\n    id: string;\n    components: Array<{\n      type: string;\n      id: string;\n      props: Record<string, any>;\n    }>;\n  }>;\n  [key: string]: any;\n}\nexport class PageBuilderComponent extends HTMLElement {\n  private pageBuilder!: PageBuilder;\n  private initialized = false;\n  private _initialDesign: PageBuilderDesign | null = null;\n  private _editable: boolean | null = null;\n  private _brandTitle?: string;\n  private _showAttributeTab?: boolean;\n  private config: any = { Basic: [], Extra: [], Custom: {} }; // Initialize Custom as an object\n  private template = `<div id=\"app\">\n      <div id=\"sidebar\"></div>\n      <div id=\"canvas\" class=\"canvas\"></div>\n      <div id=\"customization\">\n        <h4 id=\"component-name\">Component: None</h4>\n        <div id=\"controls\"></div>\n        <div id=\"layers-view\" class=\"hidden\"></div>\n      </div>\n      <div id=\"notification\" class=\"notification hidden\"></div>\n      <div id=\"dialog\" class=\"dialog hidden\">\n        <div class=\"dialog-content\">\n          <p id=\"dialog-message\"></p>\n          <button id=\"dialog-yes\" class=\"dialog-btn\">Yes</button>\n          <button id=\"dialog-no\" class=\"dialog-btn\">No</button>\n        </div>\n      </div>\n    </div>`;\n\n  constructor() {\n    super();\n  }\n\n  // --- Setter Implementation to trigger re-initialization ---\n\n  // Setters must reset initialized and call initializePageBuilder\n  set editable(value: boolean | null) {\n    if (this._editable !== value) {\n      this._editable = value;\n      if (this.initialized) {\n        this.initialized = false;\n        this.initializePageBuilder();\n      }\n    }\n  }\n\n  get editable(): boolean | null {\n    return this._editable;\n  }\n\n  set brandTitle(value: string | undefined) {\n    if (this._brandTitle !== value) {\n      this._brandTitle = value;\n      if (this.initialized) {\n        this.initialized = false;\n        this.initializePageBuilder();\n      }\n    }\n  }\n\n  get brandTitle(): string | undefined {\n    return this._brandTitle;\n  }\n\n  set showAttributeTab(value: boolean | undefined) {\n    if (this._showAttributeTab !== value) {\n      this._showAttributeTab = value;\n      if (this.initialized) {\n        this.initialized = false;\n        this.initializePageBuilder();\n      }\n    }\n  }\n\n  get showAttributeTab(): boolean | undefined {\n    return this._showAttributeTab;\n  }\n\n  set initialDesign(value: PageBuilderDesign | null) {\n    if (this._initialDesign !== value) {\n      this._initialDesign = value;\n      if (this.initialized) {\n        this.initialized = false;\n        this.initializePageBuilder();\n      }\n    }\n  }\n\n  get initialDesign(): PageBuilderDesign | null {\n    return this._initialDesign;\n  }\n\n  // CRITICAL: The config setter is the most important trigger.\n  set configData(value: any) {\n    // Check for deep equality to avoid unnecessary re-initialization\n    if (JSON.stringify(this.config) !== JSON.stringify(value)) {\n      this.config = value;\n      // MUST reset initialized to force the PageBuilder to reload with the new config\n      this.initialized = false;\n      this.initializePageBuilder();\n    }\n  }\n\n  get configData() {\n    return this.config;\n  }\n\n  // Lifecycle method: Called when the element is added to the DOM\n  connectedCallback() {\n    // 1. Ensure internal DOM template is present immediately\n    if (!this.firstElementChild) {\n      this.innerHTML = this.template;\n    }\n\n    // 2. If not initialized, attempt to initialize immediately (initializes blank/default).\n    if (!this.initialized) {\n      this.initializePageBuilder();\n    }\n  }\n\n  // Initializes the PageBuilder instance\n  private initializePageBuilder() {\n\n    // 1. Ensure the internal DOM is present before querying elements\n    const app = this.querySelector('#app');\n    if (app === null) {\n      // Not yet connected or DOM structure is missing.\n      return;\n    }\n\n    try {\n      // 2. Handle Cleanup / Re-initialization\n      if (this.pageBuilder) {\n        // Clear and restore the full template structure to the container\n        this.innerHTML = '';\n        this.innerHTML = this.template;\n      }\n\n      // Ensure config is at least an empty object structure for PageBuilder constructor\n      const effectiveConfig = this.config || { Basic: [], Extra: [], Custom: {} };\n\n      // 3. Create the new PageBuilder instance\n      this.pageBuilder = new PageBuilder(\n        effectiveConfig,\n        this._initialDesign,\n        this._editable,\n        this._brandTitle,\n        this.showAttributeTab\n      );\n      this.initialized = true;\n    } catch (error) {\n      console.error('Failed to initialize PageBuilder:', error);\n      this.initialized = false;\n    }\n  }\n}\n\n// Define the custom element if it hasn't been registered already\nif (!customElements.get('page-builder')) {\n  customElements.define('page-builder', PageBuilderComponent);\n}\n"],"mappings":"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","names":[]}